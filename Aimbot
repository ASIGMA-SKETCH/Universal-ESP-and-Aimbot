local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = game:GetService("Workspace").CurrentCamera

local LocalPlayer = Players.LocalPlayer
local AimlockTarget = nil
local AimlockEnabled = false

-- Function to wait for character to fully load
local function WaitForCharacter(player)
    if player.Character then
        return player.Character
    end
    return player.CharacterAdded:Wait()
end

-- Function to check if a target is behind a wall
local function IsVisible(target)
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("Head") then return false end

    local origin = character.Head.Position
    local direction = (target.Position - origin).unit * (target.Position - origin).magnitude

    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {character}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist

    local result = workspace:Raycast(origin, direction, rayParams)

    return result == nil or result.Instance:IsDescendantOf(target.Parent) -- Corrected visibility check
end

-- Function to check if a player is on the same team
local function IsTeammate(targetPlayer)
    if LocalPlayer.Team and targetPlayer.Team then
        return LocalPlayer.Team == targetPlayer.Team
    end
    return false
end

-- Function to find the nearest visible target (360° detection)
local function GetNearestTarget()
    local maxDistance = 200
    local nearestTarget = nil
    local lowestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            if not IsTeammate(player) then
                local char = player.Character
                local hrp = char:FindFirstChild("HumanoidRootPart")

                if hrp and IsVisible(hrp) then
                    -- 360° detection, check all players around the local player
                    local distance = (LocalPlayer.Character.HumanoidRootPart.Position - hrp.Position).Magnitude
                    if distance < lowestDistance and distance < maxDistance then
                        nearestTarget = hrp
                        lowestDistance = distance
                    end
                end
            end
        end
    end
    return nearestTarget
end

-- Toggle aimlock on right-click
UserInputService.InputBegan:Connect(function(input, processed)
    if input.UserInputType == Enum.UserInputType.MouseButton2 and not processed then
        AimlockEnabled = true
        AimlockTarget = GetNearestTarget()
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        AimlockEnabled = false
        AimlockTarget = nil
    end
end)

-- Smooth aimlock updates
RunService.RenderStepped:Connect(function()
    if AimlockEnabled and AimlockTarget then
        local head = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Head")
        if head then
            local targetPosition = AimlockTarget.Position

            -- Smooth Camera Movement
            Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.CFrame.Position, targetPosition), 0.15)

            -- Smooth Body Movement
            LocalPlayer.Character:SetPrimaryPartCFrame(
                LocalPlayer.Character:GetPrimaryPartCFrame():Lerp(CFrame.new(head.Position, targetPosition), 0.15)
            )
        end
    end
end)

-- Ensure Aimbot loads correctly after respawn
LocalPlayer.CharacterAdded:Connect(function(character)
    task.wait(2) -- Ensure everything loads properly
end)

-- Run on initial spawn
WaitForCharacter(LocalPlayer)
